magic 03f30d0a
code
   argcount 0
   nlocals 0
   stacksize 5
   flags 0040
   code
      6400006401006c00006d01005a01006d02005a0200016400006402006c00
      006d03005a0300016400006403006c00006d04005a040001640000640400
      6c05006d06005a0600016400006405006c07006d08005a08000164000064
      06006c09006d0a005a0a00016400006407006c0a005a0a00640000640700
      6c0b005a0b006400006407006c0c005a0c006400006407006c0d005a0d00
      6400006407006c0e005a0e006400006408006c0f006d0f005a0f00016400
      006407006c10005a10006400006407006c11005a11006512006113006409
      00611400640a00611500640b006501006a1600660100640c008400008300
      00595a1700640d008400005a1800651900640e006b0200722c01790b0065
      180083000001576e110004651a006b0a007228010101016e0100586e0000
      64070053
  4           0 LOAD_CONST               0 (-1)
              3 LOAD_CONST               1 (('gr', 'gru'))
              6 IMPORT_NAME              0 (gnuradio)
              9 IMPORT_FROM              1 (gr)
             12 STORE_NAME               1 (gr)
             15 IMPORT_FROM              2 (gru)
             18 STORE_NAME               2 (gru)
             21 POP_TOP             

  5          22 LOAD_CONST               0 (-1)
             25 LOAD_CONST               2 (('digital',))
             28 IMPORT_NAME              0 (gnuradio)
             31 IMPORT_FROM              3 (digital)
             34 STORE_NAME               3 (digital)
             37 POP_TOP             

  6          38 LOAD_CONST               0 (-1)
             41 LOAD_CONST               3 (('eng_notation',))
             44 IMPORT_NAME              0 (gnuradio)
             47 IMPORT_FROM              4 (eng_notation)
             50 STORE_NAME               4 (eng_notation)
             53 POP_TOP             

  7          54 LOAD_CONST               0 (-1)
             57 LOAD_CONST               4 (('eng_option',))
             60 IMPORT_NAME              5 (gnuradio.eng_option)
             63 IMPORT_FROM              6 (eng_option)
             66 STORE_NAME               6 (eng_option)
             69 POP_TOP             

  8          70 LOAD_CONST               0 (-1)
             73 LOAD_CONST               5 (('OptionParser',))
             76 IMPORT_NAME              7 (optparse)
             79 IMPORT_FROM              8 (OptionParser)
             82 STORE_NAME               8 (OptionParser)
             85 POP_TOP             

  9          86 LOAD_CONST               0 (-1)
             89 LOAD_CONST               6 (('random',))
             92 IMPORT_NAME              9 (numpy)
             95 IMPORT_FROM             10 (random)
             98 STORE_NAME              10 (random)
            101 POP_TOP             

 10         102 LOAD_CONST               0 (-1)
            105 LOAD_CONST               7 (None)
            108 IMPORT_NAME             10 (random)
            111 STORE_NAME              10 (random)
            114 LOAD_CONST               0 (-1)
            117 LOAD_CONST               7 (None)
            120 IMPORT_NAME             11 (time)
            123 STORE_NAME              11 (time)
            126 LOAD_CONST               0 (-1)
            129 LOAD_CONST               7 (None)
            132 IMPORT_NAME             12 (struct)
            135 STORE_NAME              12 (struct)
            138 LOAD_CONST               0 (-1)
            141 LOAD_CONST               7 (None)
            144 IMPORT_NAME             13 (sys)
            147 STORE_NAME              13 (sys)
            150 LOAD_CONST               0 (-1)
            153 LOAD_CONST               7 (None)
            156 IMPORT_NAME             14 (math)
            159 STORE_NAME              14 (math)

 11         162 LOAD_CONST               0 (-1)
            165 LOAD_CONST               8 (('datetime',))
            168 IMPORT_NAME             15 (datetime)
            171 IMPORT_FROM             15 (datetime)
            174 STORE_NAME              15 (datetime)
            177 POP_TOP             

 17         178 LOAD_CONST               0 (-1)
            181 LOAD_CONST               7 (None)
            184 IMPORT_NAME             16 (usrp_transmit_path)
            187 STORE_NAME              16 (usrp_transmit_path)

 18         190 LOAD_CONST               0 (-1)
            193 LOAD_CONST               7 (None)
            196 IMPORT_NAME             17 (usrp_receive_path)
            199 STORE_NAME              17 (usrp_receive_path)

 22         202 LOAD_NAME               18 (False)
            205 STORE_GLOBAL            19 (sync_status)

 27         208 LOAD_CONST               9 ('sync')
            211 STORE_GLOBAL            20 (mode)

 28         214 LOAD_CONST              10 (0)
            217 STORE_GLOBAL            21 (data_packet_delivery_count)

 30         220 LOAD_CONST              11 ('my_top_block')
            223 LOAD_NAME                1 (gr)
            226 LOAD_ATTR               22 (top_block)
            229 BUILD_TUPLE              1
            232 LOAD_CONST              12 (<code object my_top_block at 0x7ff8e03400b0, file "benchmark_rx.py", line 30>)
            235 MAKE_FUNCTION            0
            238 CALL_FUNCTION            0
            241 BUILD_CLASS         
            242 STORE_NAME              23 (my_top_block)

 42         245 LOAD_CONST              13 (<code object main at 0x7ff8e0340630, file "benchmark_rx.py", line 42>)
            248 MAKE_FUNCTION            0
            251 STORE_NAME              24 (main)

309         254 LOAD_NAME               25 (__name__)
            257 LOAD_CONST              14 ('__main__')
            260 COMPARE_OP               2 (==)
            263 POP_JUMP_IF_FALSE      300

310         266 SETUP_EXCEPT            11 (to 280)

311         269 LOAD_NAME               24 (main)
            272 CALL_FUNCTION            0
            275 POP_TOP             
            276 POP_BLOCK           
            277 JUMP_FORWARD            17 (to 297)

312     >>  280 DUP_TOP             
            281 LOAD_NAME               26 (KeyboardInterrupt)
            284 COMPARE_OP              10 (exception match)
            287 POP_JUMP_IF_FALSE      296
            290 POP_TOP             
            291 POP_TOP             
            292 POP_TOP             

313         293 JUMP_FORWARD             1 (to 297)
        >>  296 END_FINALLY         
        >>  297 JUMP_FORWARD             0 (to 300)
        >>  300 LOAD_CONST               7 (None)
            303 RETURN_VALUE        
   consts
      -1
      ('gr', 'gru')
      ('digital',)
      ('eng_notation',)
      ('eng_option',)
      ('OptionParser',)
      ('random',)
      None
      ('datetime',)
      'sync'
      0
      'my_top_block'
      code
         argcount 0
         nlocals 0
         stacksize 1
         flags 0042
         code 6500005a01006400008400005a02005253
 30           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)

 32           6 LOAD_CONST               0 (<code object __init__ at 0x7ff8e0340530, file "benchmark_rx.py", line 32>)
              9 MAKE_FUNCTION            0
             12 STORE_NAME               2 (__init__)
             15 LOAD_LOCALS         
             16 RETURN_VALUE        
         consts
            code
               argcount 6
               nlocals 6
               stacksize 4
               flags 0043
               code
                  7400006a01006a02007c0000830100017403006a03007c02007c03007c05
                  008303007c00005f04007405006a05007c01007c04008302007c00005f06
                  007c00006a07007c00006a0600830100017c00006a07007c00006a040083
                  01000164000053
 35           0 LOAD_GLOBAL              0 (gr)
              3 LOAD_ATTR                1 (top_block)
              6 LOAD_ATTR                2 (__init__)
              9 LOAD_FAST                0 (self)
             12 CALL_FUNCTION            1
             15 POP_TOP             

 36          16 LOAD_GLOBAL              3 (usrp_receive_path)
             19 LOAD_ATTR                3 (usrp_receive_path)
             22 LOAD_FAST                2 (demod_class)
             25 LOAD_FAST                3 (rx_callback)
             28 LOAD_FAST                5 (options_rx)
             31 CALL_FUNCTION            3
             34 LOAD_FAST                0 (self)
             37 STORE_ATTR               4 (rxpath)

 37          40 LOAD_GLOBAL              5 (usrp_transmit_path)
             43 LOAD_ATTR                5 (usrp_transmit_path)
             46 LOAD_FAST                1 (mod_class)
             49 LOAD_FAST                4 (options_tx)
             52 CALL_FUNCTION            2
             55 LOAD_FAST                0 (self)
             58 STORE_ATTR               6 (txpath)

 38          61 LOAD_FAST                0 (self)
             64 LOAD_ATTR                7 (connect)
             67 LOAD_FAST                0 (self)
             70 LOAD_ATTR                6 (txpath)
             73 CALL_FUNCTION            1
             76 POP_TOP             

 39          77 LOAD_FAST                0 (self)
             80 LOAD_ATTR                7 (connect)
             83 LOAD_FAST                0 (self)
             86 LOAD_ATTR                4 (rxpath)
             89 CALL_FUNCTION            1
             92 POP_TOP             
             93 LOAD_CONST               0 (None)
             96 RETURN_VALUE        
               consts
                  None
               names ('gr', 'top_block', '__init__', 'usrp_receive_path', 'rxpath', 'usrp_transmit_path', 'txpath', 'connect')
               varnames ('self', 'mod_class', 'demod_class', 'rx_callback', 'options_tx', 'options_rx')
               freevars ()
               cellvars ()
               filename 'benchmark_rx.py'
               name '__init__'
               firstlineno 32
               lnotab 00031001180115011001
         names ('__name__', '__module__', '__init__')
         varnames ()
         freevars ()
         cellvars ()
         filename 'benchmark_rx.py'
         name 'my_top_block'
         firstlineno 30
         lnotab 0602
      code
         argcount 0
         nlocals 33
         stacksize 15
         flags 0003
         code
            6401007d00006401006100006401006101006402006102006403007d0100
            640100640100640100640100640100670500610300640100640100640100
            640100640100670500610400640100640100640100640100640100640100
            640100640100640100640100640100640100640100640100640100670f00
            6105006404007406006405008402008900006406008400007d0200640700
            8400007d03008701008700006602006408008600007d04007407006a0800
            6a09008300007d05007407006a08006a0a008300007d0600740b00640900
            740c00640a00640b008300027d07007c07006a0d00640c00640d00640e00
            640f006410007c05006a0e00830000641100641200641300641400641500
            6a0f007c05006a0e0083000083010066010016830204017c07006a0d0064
            1600641700640e00641800641100641900641300641a00830203017c0700
            6a0d00641b00641c00640e00641800641100641d00641300641e00830203
            017c07006a0d00640400641f006420006421006411007406006413006422
            00830203017c07006a0d0064040064230064110064000064130064240083
            0202017c07006a11006425008301007d08007c07006a1100642600830100
            7d09007c09006a0d00642700642800640e00641800641100640300641300
            642900830203017412006a13007c07007c0800830200017c07006a140064
            2a00830100017821007c05006a1500830000445d13007d0a007c0a006a13
            007c080083010001711102577c07006a16008300005c02007d0b007d0c00
            7417007c0c008301006401006b03007266027c07006a1800830000017419
            006a1a00642b00830100016e0000642c007c0b005f1b00642d007c0b005f
            1c006412007c0b005f1d00642e007c0b005f1e00642f007c0b005f1f0064
            30007c0b005f2000740b00640900740c00640a00640b008300027d0d007c
            0d006a11006431008301007d0e007421006a13007c0d007c0e0083020001
            7c0d006a1400642a00830100017c0d006a16008300005c02007d0f007d10
            006432007c0f005f2200642d007c0f005f1c006412007c0f005f1d00642e
            007c0f005f1e00642f007c0f005f1f006430007c0f005f20006433004748
            7423007c05007c0b006a1d00197c06007c0f006a1d00197c04007c0b007c
            0f008305008901007424006a25008300007d11007c11007424006a26006b
            030072730364340047486e00008801006a2700830000017428007d120064
            350047487880037c1200720a077429006436006b0200724c05742a007428
            006b03007218057c03008300005c0200612b007d13007c02008300007d14
            008801006a2c006a2d006a2e007c1400830100018801006a2f006a30006a
            2e007c130083010001643700477c130047643800477c140047488801006a
            2f006a31006a32008300007d15007433007c15008301007c01006b040072
            2204718b036e00006402007d16006402007d17006401007d18006401007d
            190078cb007c18007c16006b00007207057c0b006a34006400006b080072
            61046439007d1a006e23007435006a36007c1700642d00188301007d1a00
            7c1a006404006b0200728404506e00007437006a3800643a007c1900643b
            00407c1a00742b00643b00408304007d1b008800008801007c1b00830200
            017c18007417007c1b00830100377d18007419006a39006a3a00643c0083
            0100017c0b006a3b00723d047c190064020016643d006b0200723d04743c
            006a3d00642b00830100017c1900642b00377d1900713d04713d0457743c
            006a3d00642b0083010001714c05643e0047742b0047643f004748640100
            7d1c00644000612900640100613e00644100612a00743f006a4000830000
            7d1d006e00007429006440006b0200728b036442007d16006442007d1700
            6401007d1e006401007d18007894017c18007c16006b00007203077c0b00
            6a34006400006b08007297056443007d1a006e23007435006a36007c1700
            642d00188301007d1a007c1a006404006b020072ba05506e00007437006a
            38006444007c1a008302007d1b008800008801007c1b00830200017c1800
            7417007c1b00830100377d18007419006a39006a3a00644500830100017c
            0b006a3b007222067c1e0064020016643d006b0200722206743c006a3d00
            642b00830100016e00007c1e00642b00377d1e00743c006a3d0064460064
            47007433007441006a4200640100642b00642d0064480067040083010083
            0100141783010001743e007c00006b0200728d067c1c00642b00377d1c00
            7c1c007402006b04007299066436006129007173057199066e0c00640100
            7d0000640100613e00743e007d00008801006a2f006a31006a3200830000
            7d1500644900477c150047644a0047487c15007c01006b0400727305743f
            006a40008300007d1f007c1f007c1d00187d2000644b0047486435004748
            644c00477c200047644a00474864360061290071730571730557718b0371
            8b035764000053
 47           0 LOAD_CONST               1 (0)
              3 STORE_FAST               0 (data_packet_delivery_count_previous)

 48           6 LOAD_CONST               1 (0)
              9 STORE_GLOBAL             0 (n_rcvd)

 49          12 LOAD_CONST               1 (0)
             15 STORE_GLOBAL             1 (n_right)

 50          18 LOAD_CONST               2 (5)
             21 STORE_GLOBAL             2 (n_attempts)

 51          24 LOAD_CONST               3 (0.01)
             27 STORE_FAST               1 (threshold)

 53          30 LOAD_CONST               1 (0)
             33 LOAD_CONST               1 (0)
             36 LOAD_CONST               1 (0)
             39 LOAD_CONST               1 (0)
             42 LOAD_CONST               1 (0)
             45 BUILD_LIST               5
             48 STORE_GLOBAL             3 (count_array)

 54          51 LOAD_CONST               1 (0)
             54 LOAD_CONST               1 (0)
             57 LOAD_CONST               1 (0)
             60 LOAD_CONST               1 (0)
             63 LOAD_CONST               1 (0)
             66 BUILD_LIST               5
             69 STORE_GLOBAL             4 (time_array)

 55          72 LOAD_CONST               1 (0)
             75 LOAD_CONST               1 (0)
             78 LOAD_CONST               1 (0)
             81 LOAD_CONST               1 (0)
             84 LOAD_CONST               1 (0)
             87 LOAD_CONST               1 (0)
             90 LOAD_CONST               1 (0)
             93 LOAD_CONST               1 (0)
             96 LOAD_CONST               1 (0)
             99 LOAD_CONST               1 (0)
            102 LOAD_CONST               1 (0)
            105 LOAD_CONST               1 (0)
            108 LOAD_CONST               1 (0)
            111 LOAD_CONST               1 (0)
            114 LOAD_CONST               1 (0)
            117 BUILD_LIST              15
            120 STORE_GLOBAL             5 (stats_array)

 58         123 LOAD_CONST               4 ('')
            126 LOAD_GLOBAL              6 (False)
            129 LOAD_CONST               5 (<code object send_pkt at 0x7ff8e03401b0, file "benchmark_rx.py", line 58>)
            132 MAKE_FUNCTION            2
            135 STORE_DEREF              0 (send_pkt)

 61         138 LOAD_CONST               6 (<code object get_freq_tx at 0x7ff8e03402b0, file "benchmark_rx.py", line 61>)
            141 MAKE_FUNCTION            0
            144 STORE_FAST               2 (get_freq_tx)

 65         147 LOAD_CONST               7 (<code object get_freq_rx at 0x7ff8e0340330, file "benchmark_rx.py", line 65>)
            150 MAKE_FUNCTION            0
            153 STORE_FAST               3 (get_freq_rx)

 81         156 LOAD_CLOSURE             1 (tb)
            159 LOAD_CLOSURE             0 (send_pkt)
            162 BUILD_TUPLE              2
            165 LOAD_CONST               8 (<code object rx_callback at 0x7ff8e03405b0, file "benchmark_rx.py", line 81>)
            168 MAKE_CLOSURE             0
            171 STORE_FAST               4 (rx_callback)

123         174 LOAD_GLOBAL              7 (digital)
            177 LOAD_ATTR                8 (modulation_utils)
            180 LOAD_ATTR                9 (type_1_mods)
            183 CALL_FUNCTION            0
            186 STORE_FAST               5 (mods)

124         189 LOAD_GLOBAL              7 (digital)
            192 LOAD_ATTR                8 (modulation_utils)
            195 LOAD_ATTR               10 (type_1_demods)
            198 CALL_FUNCTION            0
            201 STORE_FAST               6 (demods)

129         204 LOAD_GLOBAL             11 (OptionParser)
            207 LOAD_CONST               9 ('option_class')
            210 LOAD_GLOBAL             12 (eng_option)
            213 LOAD_CONST              10 ('conflict_handler')
            216 LOAD_CONST              11 ('resolve')
            219 CALL_FUNCTION          512
            222 STORE_FAST               7 (parser_tx)

131         225 LOAD_FAST                7 (parser_tx)
            228 LOAD_ATTR               13 (add_option)
            231 LOAD_CONST              12 ('-m')
            234 LOAD_CONST              13 ('--modulation')
            237 LOAD_CONST              14 ('type')
            240 LOAD_CONST              15 ('choice')
            243 LOAD_CONST              16 ('choices')
            246 LOAD_FAST                5 (mods)
            249 LOAD_ATTR               14 (keys)
            252 CALL_FUNCTION            0
            255 LOAD_CONST              17 ('default')

132         258 LOAD_CONST              18 ('gmsk')
            261 LOAD_CONST              19 ('help')
            264 LOAD_CONST              20 ('Select modulation from: %s [default=%%default]')

133         267 LOAD_CONST              21 (', ')
            270 LOAD_ATTR               15 (join)
            273 LOAD_FAST                5 (mods)
            276 LOAD_ATTR               14 (keys)
            279 CALL_FUNCTION            0
            282 CALL_FUNCTION            1
            285 BUILD_TUPLE              1
            288 BINARY_MODULO       
            289 CALL_FUNCTION         1026
            292 POP_TOP             

134         293 LOAD_FAST                7 (parser_tx)
            296 LOAD_ATTR               13 (add_option)
            299 LOAD_CONST              22 ('-s')
            302 LOAD_CONST              23 ('--size')
            305 LOAD_CONST              14 ('type')
            308 LOAD_CONST              24 ('eng_float')
            311 LOAD_CONST              17 ('default')
            314 LOAD_CONST              25 (1500)
            317 LOAD_CONST              19 ('help')

135         320 LOAD_CONST              26 ('set packet size [default=%default]')
            323 CALL_FUNCTION          770
            326 POP_TOP             

136         327 LOAD_FAST                7 (parser_tx)
            330 LOAD_ATTR               13 (add_option)
            333 LOAD_CONST              27 ('-M')
            336 LOAD_CONST              28 ('--megabytes')
            339 LOAD_CONST              14 ('type')
            342 LOAD_CONST              24 ('eng_float')
            345 LOAD_CONST              17 ('default')
            348 LOAD_CONST              29 (1.0)
            351 LOAD_CONST              19 ('help')

137         354 LOAD_CONST              30 ('set megabytes to transmit [default=%default]')
            357 CALL_FUNCTION          770
            360 POP_TOP             

138         361 LOAD_FAST                7 (parser_tx)
            364 LOAD_ATTR               13 (add_option)
            367 LOAD_CONST               4 ('')
            370 LOAD_CONST              31 ('--discontinuous')
            373 LOAD_CONST              32 ('action')
            376 LOAD_CONST              33 ('store_true')
            379 LOAD_CONST              17 ('default')
            382 LOAD_GLOBAL              6 (False)
            385 LOAD_CONST              19 ('help')

139         388 LOAD_CONST              34 ('enable discontinous transmission (bursts of 5 packets)')
            391 CALL_FUNCTION          770
            394 POP_TOP             

140         395 LOAD_FAST                7 (parser_tx)
            398 LOAD_ATTR               13 (add_option)
            401 LOAD_CONST               4 ('')
            404 LOAD_CONST              35 ('--from-file')
            407 LOAD_CONST              17 ('default')
            410 LOAD_CONST               0 (None)
            413 LOAD_CONST              19 ('help')

141         416 LOAD_CONST              36 ('use file for packet contents')
            419 CALL_FUNCTION          514
            422 POP_TOP             

144         423 LOAD_FAST                7 (parser_tx)
            426 LOAD_ATTR               17 (add_option_group)
            429 LOAD_CONST              37 ('Expert_tx')
            432 CALL_FUNCTION            1
            435 STORE_FAST               8 (expert_grp_tx)

145         438 LOAD_FAST                7 (parser_tx)
            441 LOAD_ATTR               17 (add_option_group)
            444 LOAD_CONST              38 ('DSA Options')
            447 CALL_FUNCTION            1
            450 STORE_FAST               9 (dsa_grp)

148         453 LOAD_FAST                9 (dsa_grp)
            456 LOAD_ATTR               13 (add_option)
            459 LOAD_CONST              39 ('-T')
            462 LOAD_CONST              40 ('--threshold')
            465 LOAD_CONST              14 ('type')
            468 LOAD_CONST              24 ('eng_float')
            471 LOAD_CONST              17 ('default')
            474 LOAD_CONST               3 (0.01)
            477 LOAD_CONST              19 ('help')

149         480 LOAD_CONST              41 ('set primary user sensing energy threshold [default=%default]')
            483 CALL_FUNCTION          770
            486 POP_TOP             

151         487 LOAD_GLOBAL             18 (usrp_transmit_path)
            490 LOAD_ATTR               19 (add_options)
            493 LOAD_FAST                7 (parser_tx)
            496 LOAD_FAST                8 (expert_grp_tx)
            499 CALL_FUNCTION            2
            502 POP_TOP             

152         503 LOAD_FAST                7 (parser_tx)
            506 LOAD_ATTR               20 (remove_option)
            509 LOAD_CONST              42 ('-f')
            512 CALL_FUNCTION            1
            515 POP_TOP             

155         516 SETUP_LOOP              33 (to 552)
            519 LOAD_FAST                5 (mods)
            522 LOAD_ATTR               21 (values)
            525 CALL_FUNCTION            0
            528 GET_ITER            
        >>  529 FOR_ITER                19 (to 551)
            532 STORE_FAST              10 (mod)

156         535 LOAD_FAST               10 (mod)
            538 LOAD_ATTR               19 (add_options)
            541 LOAD_FAST                8 (expert_grp_tx)
            544 CALL_FUNCTION            1
            547 POP_TOP             
            548 JUMP_ABSOLUTE          529
        >>  551 POP_BLOCK           

159     >>  552 LOAD_FAST                7 (parser_tx)
            555 LOAD_ATTR               22 (parse_args)
            558 CALL_FUNCTION            0
            561 UNPACK_SEQUENCE          2
            564 STORE_FAST              11 (options_tx)
            567 STORE_FAST              12 (args_tx)

161         570 LOAD_GLOBAL             23 (len)
            573 LOAD_FAST               12 (args_tx)
            576 CALL_FUNCTION            1
            579 LOAD_CONST               1 (0)
            582 COMPARE_OP               3 (!=)
            585 POP_JUMP_IF_FALSE      614

162         588 LOAD_FAST                7 (parser_tx)
            591 LOAD_ATTR               24 (print_help)
            594 CALL_FUNCTION            0
            597 POP_TOP             

163         598 LOAD_GLOBAL             25 (sys)
            601 LOAD_ATTR               26 (exit)
            604 LOAD_CONST              43 (1)
            607 CALL_FUNCTION            1
            610 POP_TOP             
            611 JUMP_FORWARD             0 (to 614)

166     >>  614 LOAD_CONST              44 (2440000000.0)
            617 LOAD_FAST               11 (options_tx)
            620 STORE_ATTR              27 (tx_freq)

167         623 LOAD_CONST              45 (2)
            626 LOAD_FAST               11 (options_tx)
            629 STORE_ATTR              28 (samples_per_symbol)

168         632 LOAD_CONST              18 ('gmsk')
            635 LOAD_FAST               11 (options_tx)
            638 STORE_ATTR              29 (modulation)

169         641 LOAD_CONST              46 (4096)
            644 LOAD_FAST               11 (options_tx)
            647 STORE_ATTR              30 (fusb_block_size)

170         650 LOAD_CONST              47 (16)
            653 LOAD_FAST               11 (options_tx)
            656 STORE_ATTR              31 (fusb_nblocks)

171         659 LOAD_CONST              48 (12500.0)
            662 LOAD_FAST               11 (options_tx)
            665 STORE_ATTR              32 (bitrate)

174         668 LOAD_GLOBAL             11 (OptionParser)
            671 LOAD_CONST               9 ('option_class')
            674 LOAD_GLOBAL             12 (eng_option)
            677 LOAD_CONST              10 ('conflict_handler')
            680 LOAD_CONST              11 ('resolve')
            683 CALL_FUNCTION          512
            686 STORE_FAST              13 (parser_rx)

175         689 LOAD_FAST               13 (parser_rx)
            692 LOAD_ATTR               17 (add_option_group)
            695 LOAD_CONST              49 ('Expert_rx')
            698 CALL_FUNCTION            1
            701 STORE_FAST              14 (expert_grp_rx)

176         704 LOAD_GLOBAL             33 (usrp_receive_path)
            707 LOAD_ATTR               19 (add_options)
            710 LOAD_FAST               13 (parser_rx)
            713 LOAD_FAST               14 (expert_grp_rx)
            716 CALL_FUNCTION            2
            719 POP_TOP             

178         720 LOAD_FAST               13 (parser_rx)
            723 LOAD_ATTR               20 (remove_option)
            726 LOAD_CONST              42 ('-f')
            729 CALL_FUNCTION            1
            732 POP_TOP             

180         733 LOAD_FAST               13 (parser_rx)
            736 LOAD_ATTR               22 (parse_args)
            739 CALL_FUNCTION            0
            742 UNPACK_SEQUENCE          2
            745 STORE_FAST              15 (options_rx)
            748 STORE_FAST              16 (args_rx)

183         751 LOAD_CONST              50 (900000000.0)
            754 LOAD_FAST               15 (options_rx)
            757 STORE_ATTR              34 (rx_freq)

184         760 LOAD_CONST              45 (2)
            763 LOAD_FAST               15 (options_rx)
            766 STORE_ATTR              28 (samples_per_symbol)

185         769 LOAD_CONST              18 ('gmsk')
            772 LOAD_FAST               15 (options_rx)
            775 STORE_ATTR              29 (modulation)

186         778 LOAD_CONST              46 (4096)
            781 LOAD_FAST               15 (options_rx)
            784 STORE_ATTR              30 (fusb_block_size)

187         787 LOAD_CONST              47 (16)
            790 LOAD_FAST               15 (options_rx)
            793 STORE_ATTR              31 (fusb_nblocks)

188         796 LOAD_CONST              48 (12500.0)
            799 LOAD_FAST               15 (options_rx)
            802 STORE_ATTR              32 (bitrate)

192         805 LOAD_CONST              51 ('[[ Using the RANDOM channel selection algorithm ]]\n\n')
            808 PRINT_ITEM          
            809 PRINT_NEWLINE       

196         810 LOAD_GLOBAL             35 (my_top_block)
            813 LOAD_FAST                5 (mods)
            816 LOAD_FAST               11 (options_tx)
            819 LOAD_ATTR               29 (modulation)
            822 BINARY_SUBSCR       

197         823 LOAD_FAST                6 (demods)
            826 LOAD_FAST               15 (options_rx)
            829 LOAD_ATTR               29 (modulation)
            832 BINARY_SUBSCR       

198         833 LOAD_FAST                4 (rx_callback)
            836 LOAD_FAST               11 (options_tx)

199         839 LOAD_FAST               15 (options_rx)
            842 CALL_FUNCTION            5
            845 STORE_DEREF              1 (tb)

200         848 LOAD_GLOBAL             36 (gr)
            851 LOAD_ATTR               37 (enable_realtime_scheduling)
            854 CALL_FUNCTION            0
            857 STORE_FAST              17 (r)

201         860 LOAD_FAST               17 (r)
            863 LOAD_GLOBAL             36 (gr)
            866 LOAD_ATTR               38 (RT_OK)
            869 COMPARE_OP               3 (!=)
            872 POP_JUMP_IF_FALSE      883

202         875 LOAD_CONST              52 ('Warning: failed to enable realtime scheduling')
            878 PRINT_ITEM          
            879 PRINT_NEWLINE       
            880 JUMP_FORWARD             0 (to 883)

204     >>  883 LOAD_DEREF               1 (tb)
            886 LOAD_ATTR               39 (start)
            889 CALL_FUNCTION            0
            892 POP_TOP             

207         893 LOAD_GLOBAL             40 (True)
            896 STORE_FAST              18 (running)

212         899 LOAD_CONST              53 ('\n[[ Scanning channels for network nodes ]]\n')
            902 PRINT_ITEM          
            903 PRINT_NEWLINE       

213         904 SETUP_LOOP             896 (to 1803)
        >>  907 LOAD_FAST               18 (running)
            910 POP_JUMP_IF_FALSE     1802

215         913 LOAD_GLOBAL             41 (mode)
            916 LOAD_CONST              54 ('sync')
            919 COMPARE_OP               2 (==)
            922 POP_JUMP_IF_FALSE     1356

216         925 LOAD_GLOBAL             42 (sync_status)
            928 LOAD_GLOBAL             40 (True)
            931 COMPARE_OP               3 (!=)
            934 POP_JUMP_IF_FALSE     1304

219         937 LOAD_FAST                3 (get_freq_rx)
            940 CALL_FUNCTION            0
            943 UNPACK_SEQUENCE          2
            946 STORE_GLOBAL            43 (ch)
            949 STORE_FAST              19 (hop_freq)

220         952 LOAD_FAST                2 (get_freq_tx)
            955 CALL_FUNCTION            0
            958 STORE_FAST              20 (hop_freq_tx)

222         961 LOAD_DEREF               1 (tb)
            964 LOAD_ATTR               44 (txpath)
            967 LOAD_ATTR               45 (sink)
            970 LOAD_ATTR               46 (set_freq)
            973 LOAD_FAST               20 (hop_freq_tx)
            976 CALL_FUNCTION            1
            979 POP_TOP             

223         980 LOAD_DEREF               1 (tb)
            983 LOAD_ATTR               47 (rxpath)
            986 LOAD_ATTR               48 (source)
            989 LOAD_ATTR               46 (set_freq)
            992 LOAD_FAST               19 (hop_freq)
            995 CALL_FUNCTION            1
            998 POP_TOP             

224         999 LOAD_CONST              55 ('RX_FREQ:')
           1002 PRINT_ITEM          
           1003 LOAD_FAST               19 (hop_freq)
           1006 PRINT_ITEM          
           1007 LOAD_CONST              56 ('  TX_FREQ:')
           1010 PRINT_ITEM          
           1011 LOAD_FAST               20 (hop_freq_tx)
           1014 PRINT_ITEM          
           1015 PRINT_NEWLINE       

225        1016 LOAD_DEREF               1 (tb)
           1019 LOAD_ATTR               47 (rxpath)
           1022 LOAD_ATTR               49 (probe)
           1025 LOAD_ATTR               50 (level)
           1028 CALL_FUNCTION            0
           1031 STORE_FAST              21 (ch_energy)

227        1034 LOAD_GLOBAL             51 (int)
           1037 LOAD_FAST               21 (ch_energy)
           1040 CALL_FUNCTION            1
           1043 LOAD_FAST                1 (threshold)
           1046 COMPARE_OP               4 (>)
           1049 POP_JUMP_IF_FALSE     1058

228        1052 JUMP_ABSOLUTE          907
           1055 JUMP_FORWARD             0 (to 1058)

230     >> 1058 LOAD_CONST               2 (5)
           1061 STORE_FAST              22 (nbytes)

231        1064 LOAD_CONST               2 (5)
           1067 STORE_FAST              23 (pkt_size)

232        1070 LOAD_CONST               1 (0)
           1073 STORE_FAST              24 (n)

233        1076 LOAD_CONST               1 (0)
           1079 STORE_FAST              25 (pktno)

234        1082 SETUP_LOOP             203 (to 1288)
        >> 1085 LOAD_FAST               24 (n)
           1088 LOAD_FAST               22 (nbytes)
           1091 COMPARE_OP               0 (<)
           1094 POP_JUMP_IF_FALSE     1287

235        1097 LOAD_FAST               11 (options_tx)
           1100 LOAD_ATTR               52 (from_file)
           1103 LOAD_CONST               0 (None)
           1106 COMPARE_OP               8 (is)
           1109 POP_JUMP_IF_FALSE     1121

236        1112 LOAD_CONST              57 ('s')
           1115 STORE_FAST              26 (data)
           1118 JUMP_FORWARD            35 (to 1156)

238     >> 1121 LOAD_GLOBAL             53 (source_file)
           1124 LOAD_ATTR               54 (read)
           1127 LOAD_FAST               23 (pkt_size)
           1130 LOAD_CONST              45 (2)
           1133 BINARY_SUBTRACT     
           1134 CALL_FUNCTION            1
           1137 STORE_FAST              26 (data)

239        1140 LOAD_FAST               26 (data)
           1143 LOAD_CONST               4 ('')
           1146 COMPARE_OP               2 (==)
           1149 POP_JUMP_IF_FALSE     1156

240        1152 BREAK_LOOP          
           1153 JUMP_FORWARD             0 (to 1156)

242     >> 1156 LOAD_GLOBAL             55 (struct)
           1159 LOAD_ATTR               56 (pack)
           1162 LOAD_CONST              58 ('!HsH')
           1165 LOAD_FAST               25 (pktno)
           1168 LOAD_CONST              59 (65535)
           1171 BINARY_AND          
           1172 LOAD_FAST               26 (data)
           1175 LOAD_GLOBAL             43 (ch)
           1178 LOAD_CONST              59 (65535)
           1181 BINARY_AND          
           1182 CALL_FUNCTION            4
           1185 STORE_FAST              27 (payload)

244        1188 LOAD_DEREF               0 (send_pkt)
           1191 LOAD_DEREF               1 (tb)
           1194 LOAD_FAST               27 (payload)
           1197 CALL_FUNCTION            2
           1200 POP_TOP             

245        1201 LOAD_FAST               24 (n)
           1204 LOAD_GLOBAL             23 (len)
           1207 LOAD_FAST               27 (payload)
           1210 CALL_FUNCTION            1
           1213 INPLACE_ADD         
           1214 STORE_FAST              24 (n)

246        1217 LOAD_GLOBAL             25 (sys)
           1220 LOAD_ATTR               57 (stderr)
           1223 LOAD_ATTR               58 (write)
           1226 LOAD_CONST              60 ('SEND SYNC PACKET\n')
           1229 CALL_FUNCTION            1
           1232 POP_TOP             

247        1233 LOAD_FAST               11 (options_tx)
           1236 LOAD_ATTR               59 (discontinuous)
           1239 POP_JUMP_IF_FALSE     1085
           1242 LOAD_FAST               25 (pktno)
           1245 LOAD_CONST               2 (5)
           1248 BINARY_MODULO       
           1249 LOAD_CONST              61 (4)
           1252 COMPARE_OP               2 (==)
           1255 POP_JUMP_IF_FALSE     1085

248        1258 LOAD_GLOBAL             60 (time)
           1261 LOAD_ATTR               61 (sleep)
           1264 LOAD_CONST              43 (1)
           1267 CALL_FUNCTION            1
           1270 POP_TOP             

249        1271 LOAD_FAST               25 (pktno)
           1274 LOAD_CONST              43 (1)
           1277 INPLACE_ADD         
           1278 STORE_FAST              25 (pktno)
           1281 JUMP_ABSOLUTE         1085
           1284 JUMP_ABSOLUTE         1085
        >> 1287 POP_BLOCK           

250     >> 1288 LOAD_GLOBAL             60 (time)
           1291 LOAD_ATTR               61 (sleep)
           1294 LOAD_CONST              43 (1)
           1297 CALL_FUNCTION            1
           1300 POP_TOP             
           1301 JUMP_ABSOLUTE         1356

253     >> 1304 LOAD_CONST              62 ('\n\n[[ Network Node Found: Commencing communications on CHANNEL ')
           1307 PRINT_ITEM          
           1308 LOAD_GLOBAL             43 (ch)
           1311 PRINT_ITEM          
           1312 LOAD_CONST              63 (' ]]\n')
           1315 PRINT_ITEM          
           1316 PRINT_NEWLINE       

254        1317 LOAD_CONST               1 (0)
           1320 STORE_FAST              28 (n_attempts_counter)

255        1323 LOAD_CONST              64 ('traffic')
           1326 STORE_GLOBAL            41 (mode)

256        1329 LOAD_CONST               1 (0)
           1332 STORE_GLOBAL            62 (data_packet_delivery_count)

257        1335 LOAD_CONST              65 ('False')
           1338 STORE_GLOBAL            42 (sync_status)

258        1341 LOAD_GLOBAL             63 (datetime)
           1344 LOAD_ATTR               64 (now)
           1347 CALL_FUNCTION            0
           1350 STORE_FAST              29 (start_time)
           1353 JUMP_FORWARD             0 (to 1356)

263     >> 1356 LOAD_GLOBAL             41 (mode)
           1359 LOAD_CONST              64 ('traffic')
           1362 COMPARE_OP               2 (==)
           1365 POP_JUMP_IF_FALSE      907

264        1368 LOAD_CONST              66 (15)
           1371 STORE_FAST              22 (nbytes)

265        1374 LOAD_CONST              66 (15)
           1377 STORE_FAST              23 (pkt_size)

266        1380 LOAD_CONST               1 (0)
           1383 STORE_FAST              30 (data_pktno)

267        1386 LOAD_CONST               1 (0)
           1389 STORE_FAST              24 (n)

268        1392 SETUP_LOOP             404 (to 1799)
        >> 1395 LOAD_FAST               24 (n)
           1398 LOAD_FAST               22 (nbytes)
           1401 COMPARE_OP               0 (<)
           1404 POP_JUMP_IF_FALSE     1795

269        1407 LOAD_FAST               11 (options_tx)
           1410 LOAD_ATTR               52 (from_file)
           1413 LOAD_CONST               0 (None)
           1416 COMPARE_OP               8 (is)
           1419 POP_JUMP_IF_FALSE     1431

270        1422 LOAD_CONST              67 ('dHi how are you')
           1425 STORE_FAST              26 (data)
           1428 JUMP_FORWARD            35 (to 1466)

272     >> 1431 LOAD_GLOBAL             53 (source_file)
           1434 LOAD_ATTR               54 (read)
           1437 LOAD_FAST               23 (pkt_size)
           1440 LOAD_CONST              45 (2)
           1443 BINARY_SUBTRACT     
           1444 CALL_FUNCTION            1
           1447 STORE_FAST              26 (data)

273        1450 LOAD_FAST               26 (data)
           1453 LOAD_CONST               4 ('')
           1456 COMPARE_OP               2 (==)
           1459 POP_JUMP_IF_FALSE     1466

274        1462 BREAK_LOOP          
           1463 JUMP_FORWARD             0 (to 1466)

277     >> 1466 LOAD_GLOBAL             55 (struct)
           1469 LOAD_ATTR               56 (pack)
           1472 LOAD_CONST              68 ('!15s')
           1475 LOAD_FAST               26 (data)
           1478 CALL_FUNCTION            2
           1481 STORE_FAST              27 (payload)

279        1484 LOAD_DEREF               0 (send_pkt)
           1487 LOAD_DEREF               1 (tb)
           1490 LOAD_FAST               27 (payload)
           1493 CALL_FUNCTION            2
           1496 POP_TOP             

280        1497 LOAD_FAST               24 (n)
           1500 LOAD_GLOBAL             23 (len)
           1503 LOAD_FAST               27 (payload)
           1506 CALL_FUNCTION            1
           1509 INPLACE_ADD         
           1510 STORE_FAST              24 (n)

281        1513 LOAD_GLOBAL             25 (sys)
           1516 LOAD_ATTR               57 (stderr)
           1519 LOAD_ATTR               58 (write)
           1522 LOAD_CONST              69 ('SEND TRAFFIC PACKET\n')
           1525 CALL_FUNCTION            1
           1528 POP_TOP             

282        1529 LOAD_FAST               11 (options_tx)
           1532 LOAD_ATTR               59 (discontinuous)
           1535 POP_JUMP_IF_FALSE     1570
           1538 LOAD_FAST               30 (data_pktno)
           1541 LOAD_CONST               2 (5)
           1544 BINARY_MODULO       
           1545 LOAD_CONST              61 (4)
           1548 COMPARE_OP               2 (==)
           1551 POP_JUMP_IF_FALSE     1570

283        1554 LOAD_GLOBAL             60 (time)
           1557 LOAD_ATTR               61 (sleep)
           1560 LOAD_CONST              43 (1)
           1563 CALL_FUNCTION            1
           1566 POP_TOP             
           1567 JUMP_FORWARD             0 (to 1570)

284     >> 1570 LOAD_FAST               30 (data_pktno)
           1573 LOAD_CONST              43 (1)
           1576 INPLACE_ADD         
           1577 STORE_FAST              30 (data_pktno)

285        1580 LOAD_GLOBAL             60 (time)
           1583 LOAD_ATTR               61 (sleep)
           1586 LOAD_CONST              70 (0.2)
           1589 LOAD_CONST              71 (0.05)
           1592 LOAD_GLOBAL             51 (int)
           1595 LOAD_GLOBAL             65 (random)
           1598 LOAD_ATTR               66 (choice)
           1601 LOAD_CONST               1 (0)
           1604 LOAD_CONST              43 (1)
           1607 LOAD_CONST              45 (2)
           1610 LOAD_CONST              72 (3)
           1613 BUILD_LIST               4
           1616 CALL_FUNCTION            1
           1619 CALL_FUNCTION            1
           1622 BINARY_MULTIPLY     
           1623 BINARY_ADD          
           1624 CALL_FUNCTION            1
           1627 POP_TOP             

287        1628 LOAD_GLOBAL             62 (data_packet_delivery_count)
           1631 LOAD_FAST                0 (data_packet_delivery_count_previous)
           1634 COMPARE_OP               2 (==)
           1637 POP_JUMP_IF_FALSE     1677

288        1640 LOAD_FAST               28 (n_attempts_counter)
           1643 LOAD_CONST              43 (1)
           1646 INPLACE_ADD         
           1647 STORE_FAST              28 (n_attempts_counter)

289        1650 LOAD_FAST               28 (n_attempts_counter)
           1653 LOAD_GLOBAL              2 (n_attempts)
           1656 COMPARE_OP               4 (>)
           1659 POP_JUMP_IF_FALSE     1689

290        1662 LOAD_CONST              54 ('sync')
           1665 STORE_GLOBAL            41 (mode)

291        1668 JUMP_ABSOLUTE         1395
           1671 JUMP_ABSOLUTE         1689
           1674 JUMP_FORWARD            12 (to 1689)

293     >> 1677 LOAD_CONST               1 (0)
           1680 STORE_FAST               0 (data_packet_delivery_count_previous)

294        1683 LOAD_CONST               1 (0)
           1686 STORE_GLOBAL            62 (data_packet_delivery_count)

296     >> 1689 LOAD_GLOBAL             62 (data_packet_delivery_count)
           1692 STORE_FAST               0 (data_packet_delivery_count_previous)

297        1695 LOAD_DEREF               1 (tb)
           1698 LOAD_ATTR               47 (rxpath)
           1701 LOAD_ATTR               49 (probe)
           1704 LOAD_ATTR               50 (level)
           1707 CALL_FUNCTION            0
           1710 STORE_FAST              21 (ch_energy)

298        1713 LOAD_CONST              73 ('CHANNEL ENERGY:')
           1716 PRINT_ITEM          
           1717 LOAD_FAST               21 (ch_energy)
           1720 PRINT_ITEM          
           1721 LOAD_CONST              74 ('\n')
           1724 PRINT_ITEM          
           1725 PRINT_NEWLINE       

299        1726 LOAD_FAST               21 (ch_energy)
           1729 LOAD_FAST                1 (threshold)
           1732 COMPARE_OP               4 (>)
           1735 POP_JUMP_IF_FALSE     1395

300        1738 LOAD_GLOBAL             63 (datetime)
           1741 LOAD_ATTR               64 (now)
           1744 CALL_FUNCTION            0
           1747 STORE_FAST              31 (stop_time)

301        1750 LOAD_FAST               31 (stop_time)
           1753 LOAD_FAST               29 (start_time)
           1756 BINARY_SUBTRACT     
           1757 STORE_FAST              32 (_elapsed_time)

302        1760 LOAD_CONST              75 ('\n[[ Primary User Detected:  Evacuating Current Channel ]]\n')
           1763 PRINT_ITEM          
           1764 PRINT_NEWLINE       

303        1765 LOAD_CONST              53 ('\n[[ Scanning channels for network nodes ]]\n')
           1768 PRINT_ITEM          
           1769 PRINT_NEWLINE       

304        1770 LOAD_CONST              76 ('\nAbsent time:')
           1773 PRINT_ITEM          
           1774 LOAD_FAST               32 (_elapsed_time)
           1777 PRINT_ITEM          
           1778 LOAD_CONST              74 ('\n')
           1781 PRINT_ITEM          
           1782 PRINT_NEWLINE       

305        1783 LOAD_CONST              54 ('sync')
           1786 STORE_GLOBAL            41 (mode)
           1789 JUMP_ABSOLUTE         1395
           1792 JUMP_ABSOLUTE         1395
        >> 1795 POP_BLOCK           
           1796 JUMP_ABSOLUTE          907
        >> 1799 JUMP_ABSOLUTE          907
        >> 1802 POP_BLOCK           
        >> 1803 LOAD_CONST               0 (None)
           1806 RETURN_VALUE        
         consts
            None
            0
            5
            0.01
            ''
            code
               argcount 3
               nlocals 3
               stacksize 3
               flags 0053
               code 7c00006a00006a01007c01007c020083020053
 59           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (txpath)
              6 LOAD_ATTR                1 (send_pkt)
              9 LOAD_FAST                1 (payload)
             12 LOAD_FAST                2 (eof)
             15 CALL_FUNCTION            2
             18 RETURN_VALUE        
               consts
                  None
               names ('txpath', 'send_pkt')
               varnames ('self', 'payload', 'eof')
               freevars ()
               cellvars ()
               filename 'benchmark_rx.py'
               name 'send_pkt'
               firstlineno 58
               lnotab 0001
            code
               argcount 0
               nlocals 0
               stacksize 2
               flags 0053
               code 64030053
 63           0 LOAD_CONST               3 (2440000000.0)
              3 RETURN_VALUE        
               consts
                  None
                  2.44
                  1000000000.0
                  2440000000.0
               names ()
               varnames ()
               freevars ()
               cellvars ()
               filename 'benchmark_rx.py'
               name 'get_freq_tx'
               firstlineno 61
               lnotab 0002
            code
               argcount 0
               nlocals 2
               stacksize 6
               flags 0053
               code
                  7400007401006a0200640100640200640300640400670400830100830100
                  7d00007c00006403006b0000724c007403006405006406007c0000640100
                  186407001417148301007d01006e1c007403006405006408007c00006403
                  00186407001417148301007d01007404007c000019640100177404007c00
                  003c6409004748640a00477404006401001947640b004774040064020019
                  47640c00477404006403001947640d00477404006404001947487c00007c
                  010066020053
 68           0 LOAD_GLOBAL              0 (int)
              3 LOAD_GLOBAL              1 (random)
              6 LOAD_ATTR                2 (choice)
              9 LOAD_CONST               1 (1)
             12 LOAD_CONST               2 (7)
             15 LOAD_CONST               3 (8)
             18 LOAD_CONST               4 (14)
             21 BUILD_LIST               4
             24 CALL_FUNCTION            1
             27 CALL_FUNCTION            1
             30 STORE_FAST               0 (channel)

 70          33 LOAD_FAST                0 (channel)
             36 LOAD_CONST               3 (8)
             39 COMPARE_OP               0 (<)
             42 POP_JUMP_IF_FALSE       76

 71          45 LOAD_GLOBAL              3 (float)
             48 LOAD_CONST               5 (1000000.0)
             51 LOAD_CONST               6 (850)
             54 LOAD_FAST                0 (channel)
             57 LOAD_CONST               1 (1)
             60 BINARY_SUBTRACT     
             61 LOAD_CONST               7 (5)
             64 BINARY_MULTIPLY     
             65 BINARY_ADD          
             66 BINARY_MULTIPLY     
             67 CALL_FUNCTION            1
             70 STORE_FAST               1 (hop_freq)
             73 JUMP_FORWARD            28 (to 104)

 73     >>   76 LOAD_GLOBAL              3 (float)
             79 LOAD_CONST               5 (1000000.0)
             82 LOAD_CONST               8 (900)
             85 LOAD_FAST                0 (channel)
             88 LOAD_CONST               3 (8)
             91 BINARY_SUBTRACT     
             92 LOAD_CONST               7 (5)
             95 BINARY_MULTIPLY     
             96 BINARY_ADD          
             97 BINARY_MULTIPLY     
             98 CALL_FUNCTION            1
            101 STORE_FAST               1 (hop_freq)

 75     >>  104 LOAD_GLOBAL              4 (stats_array)
            107 LOAD_FAST                0 (channel)
            110 BINARY_SUBSCR       
            111 LOAD_CONST               1 (1)
            114 BINARY_ADD          
            115 LOAD_GLOBAL              4 (stats_array)
            118 LOAD_FAST                0 (channel)
            121 STORE_SUBSCR        

 76         122 LOAD_CONST               9 ('\nChannel DSA Selection Statistics (Channel #: Number times selected)')
            125 PRINT_ITEM          
            126 PRINT_NEWLINE       

 77         127 LOAD_CONST              10 ('1: ')
            130 PRINT_ITEM          
            131 LOAD_GLOBAL              4 (stats_array)
            134 LOAD_CONST               1 (1)
            137 BINARY_SUBSCR       
            138 PRINT_ITEM          
            139 LOAD_CONST              11 (' 7: ')
            142 PRINT_ITEM          
            143 LOAD_GLOBAL              4 (stats_array)
            146 LOAD_CONST               2 (7)
            149 BINARY_SUBSCR       
            150 PRINT_ITEM          
            151 LOAD_CONST              12 (' 8: ')
            154 PRINT_ITEM          
            155 LOAD_GLOBAL              4 (stats_array)
            158 LOAD_CONST               3 (8)
            161 BINARY_SUBSCR       
            162 PRINT_ITEM          
            163 LOAD_CONST              13 (' 14: ')
            166 PRINT_ITEM          
            167 LOAD_GLOBAL              4 (stats_array)
            170 LOAD_CONST               4 (14)
            173 BINARY_SUBSCR       
            174 PRINT_ITEM          
            175 PRINT_NEWLINE       

 78         176 LOAD_FAST                0 (channel)
            179 LOAD_FAST                1 (hop_freq)
            182 BUILD_TUPLE              2
            185 RETURN_VALUE        
               consts
                  None
                  1
                  7
                  8
                  14
                  1000000.0
                  850
                  5
                  900
                  '\nChannel DSA Selection Statistics (Channel #: Number times selected)'
                  '1: '
                  ' 7: '
                  ' 8: '
                  ' 14: '
               names ('int', 'random', 'choice', 'float', 'stats_array')
               varnames ('channel', 'hop_freq')
               freevars ()
               cellvars ()
               filename 'benchmark_rx.py'
               name 'get_freq_rx'
               firstlineno 65
               lnotab 000321020c011f021c02120105013101
            code
               argcount 2
               nlocals 9
               stacksize 8
               flags 0013
               code
                  7400006401006b02007217017c000072170164020047487401006a020064
                  03007c0100640400640500218302005c01007d02007401006a0200640600
                  7c0100640500198302005c01007d03007401006a02006403007c01006407
                  00640800218302005c01007d04007403007c03008301006409006b020072
                  a0007403007c04008301007403007404008301006b020072a00074050061
                  0600640a0047486e00007403007c0300830100640b006b02007214017403
                  007c04008301007403007404008301006b0200721401640c004748740500
                  6106006409007d05006404007d02007401006a0700640d007c0200640e00
                  407c0500740400640e00408304007d06008801008800007c060083020001
                  7114017117016e0000740000640f006b0200729f017c0000729f01740100
                  6a02006406007c0100640400198302005c01007d07007c07006410006b02
                  00729c01740800641100176108007401006a02006412007c010064110064
                  1300218302007d08006414007d05007401006a07006415007c0500830200
                  7d01008801008800007c010083020001719c01719f016e00007409006411
                  00376109007c000072bc01740a0064110037610a006e000064000053
 85           0 LOAD_GLOBAL              0 (mode)
              3 LOAD_CONST               1 ('sync')
              6 COMPARE_OP               2 (==)
              9 POP_JUMP_IF_FALSE      279

 86          12 LOAD_FAST                0 (ok)
             15 POP_JUMP_IF_FALSE      279

 87          18 LOAD_CONST               2 ('SYNC:GOT CHANNEL PACKET')
             21 PRINT_ITEM          
             22 PRINT_NEWLINE       

 88          23 LOAD_GLOBAL              1 (struct)
             26 LOAD_ATTR                2 (unpack)
             29 LOAD_CONST               3 ('!H')
             32 LOAD_FAST                1 (payload)
             35 LOAD_CONST               4 (0)
             38 LOAD_CONST               5 (2)
             41 SLICE+3             
             42 CALL_FUNCTION            2
             45 UNPACK_SEQUENCE          1
             48 STORE_FAST               2 (pktno)

 89          51 LOAD_GLOBAL              1 (struct)
             54 LOAD_ATTR                2 (unpack)
             57 LOAD_CONST               6 ('!s')
             60 LOAD_FAST                1 (payload)
             63 LOAD_CONST               5 (2)
             66 BINARY_SUBSCR       
             67 CALL_FUNCTION            2
             70 UNPACK_SEQUENCE          1
             73 STORE_FAST               3 (sync_signal)

 90          76 LOAD_GLOBAL              1 (struct)
             79 LOAD_ATTR                2 (unpack)
             82 LOAD_CONST               3 ('!H')
             85 LOAD_FAST                1 (payload)
             88 LOAD_CONST               7 (3)
             91 LOAD_CONST               8 (5)
             94 SLICE+3             
             95 CALL_FUNCTION            2
             98 UNPACK_SEQUENCE          1
            101 STORE_FAST               4 (data_channel)

 92         104 LOAD_GLOBAL              3 (str)
            107 LOAD_FAST                3 (sync_signal)
            110 CALL_FUNCTION            1
            113 LOAD_CONST               9 ('o')
            116 COMPARE_OP               2 (==)
            119 POP_JUMP_IF_FALSE      160
            122 LOAD_GLOBAL              3 (str)
            125 LOAD_FAST                4 (data_channel)
            128 CALL_FUNCTION            1
            131 LOAD_GLOBAL              3 (str)
            134 LOAD_GLOBAL              4 (ch)
            137 CALL_FUNCTION            1
            140 COMPARE_OP               2 (==)
            143 POP_JUMP_IF_FALSE      160

 93         146 LOAD_GLOBAL              5 (True)
            149 STORE_GLOBAL             6 (sync_status)

 95         152 LOAD_CONST              10 ('SYNC:RECEIVE CONFIRM PACKET...LINK ESTABLISHED')
            155 PRINT_ITEM          
            156 PRINT_NEWLINE       
            157 JUMP_FORWARD             0 (to 160)

 96     >>  160 LOAD_GLOBAL              3 (str)
            163 LOAD_FAST                3 (sync_signal)
            166 CALL_FUNCTION            1
            169 LOAD_CONST              11 ('s')
            172 COMPARE_OP               2 (==)
            175 POP_JUMP_IF_FALSE      276
            178 LOAD_GLOBAL              3 (str)
            181 LOAD_FAST                4 (data_channel)
            184 CALL_FUNCTION            1
            187 LOAD_GLOBAL              3 (str)
            190 LOAD_GLOBAL              4 (ch)
            193 CALL_FUNCTION            1
            196 COMPARE_OP               2 (==)
            199 POP_JUMP_IF_FALSE      276

 97         202 LOAD_CONST              12 ('SYNC:SEND CONFIRM PACKET')
            205 PRINT_ITEM          
            206 PRINT_NEWLINE       

 98         207 LOAD_GLOBAL              5 (True)
            210 STORE_GLOBAL             6 (sync_status)

 99         213 LOAD_CONST               9 ('o')
            216 STORE_FAST               5 (data)

100         219 LOAD_CONST               4 (0)
            222 STORE_FAST               2 (pktno)

101         225 LOAD_GLOBAL              1 (struct)
            228 LOAD_ATTR                7 (pack)
            231 LOAD_CONST              13 ('!HsH')
            234 LOAD_FAST                2 (pktno)
            237 LOAD_CONST              14 (65535)
            240 BINARY_AND          
            241 LOAD_FAST                5 (data)
            244 LOAD_GLOBAL              4 (ch)
            247 LOAD_CONST              14 (65535)
            250 BINARY_AND          
            251 CALL_FUNCTION            4
            254 STORE_FAST               6 (ack_payload)

102         257 LOAD_DEREF               1 (send_pkt)
            260 LOAD_DEREF               0 (tb)
            263 LOAD_FAST                6 (ack_payload)
            266 CALL_FUNCTION            2
            269 POP_TOP             
            270 JUMP_ABSOLUTE          276
            273 JUMP_ABSOLUTE          279
        >>  276 JUMP_FORWARD             0 (to 279)

106     >>  279 LOAD_GLOBAL              0 (mode)
            282 LOAD_CONST              15 ('traffic')
            285 COMPARE_OP               2 (==)
            288 POP_JUMP_IF_FALSE      415

107         291 LOAD_FAST                0 (ok)
            294 POP_JUMP_IF_FALSE      415

108         297 LOAD_GLOBAL              1 (struct)
            300 LOAD_ATTR                2 (unpack)
            303 LOAD_CONST               6 ('!s')
            306 LOAD_FAST                1 (payload)
            309 LOAD_CONST               4 (0)
            312 BINARY_SUBSCR       
            313 CALL_FUNCTION            2
            316 UNPACK_SEQUENCE          1
            319 STORE_FAST               7 (data_header)

109         322 LOAD_FAST                7 (data_header)
            325 LOAD_CONST              16 ('d')
            328 COMPARE_OP               2 (==)
            331 POP_JUMP_IF_FALSE      412

111         334 LOAD_GLOBAL              8 (data_packet_delivery_count)
            337 LOAD_CONST              17 (1)
            340 BINARY_ADD          
            341 STORE_GLOBAL             8 (data_packet_delivery_count)

112         344 LOAD_GLOBAL              1 (struct)
            347 LOAD_ATTR                2 (unpack)
            350 LOAD_CONST              18 ('!14s')
            353 LOAD_FAST                1 (payload)
            356 LOAD_CONST              17 (1)
            359 LOAD_CONST              19 (15)
            362 SLICE+3             
            363 CALL_FUNCTION            2
            366 STORE_FAST               8 (comm)

113         369 LOAD_CONST              20 ('dI am fine.....')
            372 STORE_FAST               5 (data)

114         375 LOAD_GLOBAL              1 (struct)
            378 LOAD_ATTR                7 (pack)
            381 LOAD_CONST              21 ('!15s')
            384 LOAD_FAST                5 (data)
            387 CALL_FUNCTION            2
            390 STORE_FAST               1 (payload)

115         393 LOAD_DEREF               1 (send_pkt)
            396 LOAD_DEREF               0 (tb)
            399 LOAD_FAST                1 (payload)
            402 CALL_FUNCTION            2
            405 POP_TOP             
            406 JUMP_ABSOLUTE          412
            409 JUMP_ABSOLUTE          415
        >>  412 JUMP_FORWARD             0 (to 415)

119     >>  415 LOAD_GLOBAL              9 (n_rcvd)
            418 LOAD_CONST              17 (1)
            421 INPLACE_ADD         
            422 STORE_GLOBAL             9 (n_rcvd)

120         425 LOAD_FAST                0 (ok)
            428 POP_JUMP_IF_FALSE      444

121         431 LOAD_GLOBAL             10 (n_right)
            434 LOAD_CONST              17 (1)
            437 INPLACE_ADD         
            438 STORE_GLOBAL            10 (n_right)
            441 JUMP_FORWARD             0 (to 444)
        >>  444 LOAD_CONST               0 (None)
            447 RETURN_VALUE        
               consts
                  None
                  'sync'
                  'SYNC:GOT CHANNEL PACKET'
                  '!H'
                  0
                  2
                  '!s'
                  3
                  5
                  'o'
                  'SYNC:RECEIVE CONFIRM PACKET...LINK ESTABLISHED'
                  's'
                  'SYNC:SEND CONFIRM PACKET'
                  '!HsH'
                  65535
                  'traffic'
                  'd'
                  1
                  '!14s'
                  15
                  'dI am fine.....'
                  '!15s'
               names ('mode', 'struct', 'unpack', 'str', 'ch', 'True', 'sync_status', 'pack', 'data_packet_delivery_count', 'n_rcvd', 'n_right')
               varnames ('ok', 'payload', 'pktno', 'sync_signal', 'data_channel', 'data', 'ack_payload', 'data_header', 'comm')
               freevars ('tb', 'send_pkt')
               cellvars ()
               filename 'benchmark_rx.py'
               name 'rx_callback'
               firstlineno 81
               lnotab
                  00040c01060105011c0119011c022a01060208012a010501060106010601
                  200116040c01060119010c020a0119010601120116040a010601
            'option_class'
            'conflict_handler'
            'resolve'
            '-m'
            '--modulation'
            'type'
            'choice'
            'choices'
            'default'
            'gmsk'
            'help'
            'Select modulation from: %s [default=%%default]'
            ', '
            '-s'
            '--size'
            'eng_float'
            1500
            'set packet size [default=%default]'
            '-M'
            '--megabytes'
            1.0
            'set megabytes to transmit [default=%default]'
            '--discontinuous'
            'action'
            'store_true'
            'enable discontinous transmission (bursts of 5 packets)'
            '--from-file'
            'use file for packet contents'
            'Expert_tx'
            'DSA Options'
            '-T'
            '--threshold'
            'set primary user sensing energy threshold [default=%default]'
            '-f'
            1
            2440000000.0
            2
            4096
            16
            12500.0
            'Expert_rx'
            900000000.0
            '[[ Using the RANDOM channel selection algorithm ]]\n\n'
            'Warning: failed to enable realtime scheduling'
            '\n[[ Scanning channels for network nodes ]]\n'
            'sync'
            'RX_FREQ:'
            '  TX_FREQ:'
            's'
            '!HsH'
            65535
            'SEND SYNC PACKET\n'
            4
            '\n\n[[ Network Node Found: Commencing communications on CHANNEL '
            ' ]]\n'
            'traffic'
            'False'
            15
            'dHi how are you'
            '!15s'
            'SEND TRAFFIC PACKET\n'
            0.2
            0.05
            3
            'CHANNEL ENERGY:'
            '\n'
            '\n[[ Primary User Detected:  Evacuating Current Channel ]]\n'
            '\nAbsent time:'
         names ('n_rcvd', 'n_right', 'n_attempts', 'count_array', 'time_array', 'stats_array', 'False', 'digital', 'modulation_utils', 'type_1_mods', 'type_1_demods', 'OptionParser', 'eng_option', 'add_option', 'keys', 'join', 'None', 'add_option_group', 'usrp_transmit_path', 'add_options', 'remove_option', 'values', 'parse_args', 'len', 'print_help', 'sys', 'exit', 'tx_freq', 'samples_per_symbol', 'modulation', 'fusb_block_size', 'fusb_nblocks', 'bitrate', 'usrp_receive_path', 'rx_freq', 'my_top_block', 'gr', 'enable_realtime_scheduling', 'RT_OK', 'start', 'True', 'mode', 'sync_status', 'ch', 'txpath', 'sink', 'set_freq', 'rxpath', 'source', 'probe', 'level', 'int', 'from_file', 'source_file', 'read', 'struct', 'pack', 'stderr', 'write', 'discontinuous', 'time', 'sleep', 'data_packet_delivery_count', 'datetime', 'now', 'random', 'choice')
         varnames ('data_packet_delivery_count_previous', 'threshold', 'get_freq_tx', 'get_freq_rx', 'rx_callback', 'mods', 'demods', 'parser_tx', 'expert_grp_tx', 'dsa_grp', 'mod', 'options_tx', 'args_tx', 'parser_rx', 'expert_grp_rx', 'options_rx', 'args_rx', 'r', 'running', 'hop_freq', 'hop_freq_tx', 'ch_energy', 'nbytes', 'pkt_size', 'n', 'pktno', 'data', 'payload', 'n_attempts_counter', 'start_time', 'data_pktno', 'stop_time', '_elapsed_time')
         freevars ()
         cellvars ('send_pkt', 'tb')
         filename 'benchmark_rx.py'
         name 'main'
         firstlineno 42
         lnotab
            0005060106010601060106021501150133030f0309040910122a0f010f05
            1502210109011a011b0107011b0107011b010701150107030f010f031b01
            070210010d0313011103120212010a011003090109010901090109010903
            15010f0110020d02120309010901090109010901090405040d010a010601
            09010c010f0108020a030605050109020c010c030f010902130113011101
            12021201060206010601060106010f010f01090213010c01040220020d01
            1001100119010d01110110030d0106010601060106010f050c0106010601
            060106010f010f01090213010c01040312020d0110011001190110010a01
            30020c010a010c010601090206010602060112010d010c010c010a010501
            05010d01
      '__main__'
   names ('gnuradio', 'gr', 'gru', 'digital', 'eng_notation', 'gnuradio.eng_option', 'eng_option', 'optparse', 'OptionParser', 'numpy', 'random', 'time', 'struct', 'sys', 'math', 'datetime', 'usrp_transmit_path', 'usrp_receive_path', 'False', 'sync_status', 'mode', 'data_packet_delivery_count', 'top_block', 'my_top_block', 'main', '__name__', 'KeyboardInterrupt')
   varnames ()
   freevars ()
   cellvars ()
   filename 'benchmark_rx.py'
   name '<module>'
   firstlineno 4
   lnotab
      1601100110011001100110013c0110060c010c04060506010602190c09ff
      000c0c0103010b010d01
